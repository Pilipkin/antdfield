{"version":3,"file":"static/iframe.20a31eed60dac794df2d.bundle.js","sources":["webpack:///./src/components/AntdField/index.js"],"sourcesContent":["import React from 'react'\r\nimport { Field } from 'formik'\r\nimport { Input, Form, Checkbox, Select, TreeSelect } from 'antd'\r\n\r\nconst FormItem = Form.Item\r\nconst CheckboxGroup = Checkbox.Group\r\n\r\n/**\r\n * To support default antd behavior with key/value, leave this ternary here.\r\n */\r\nconst getSelectOption = ({ key, value, title }) => (\r\n  <Select.Option key={key ? String(key) : String(value)} title={title || value}>\r\n    {title}\r\n  </Select.Option>\r\n)\r\n\r\nexport const FormItemWrapper = ({\r\n  field,\r\n  form: { touched, errors, setFieldValue, setFieldTouched },\r\n  element = <Input />,\r\n  required,\r\n  hidden,\r\n  label,\r\n  layout,\r\n  options,\r\n  title,\r\n  onChange: _onChange,\r\n  onBlur: _onBlur,\r\n}) => {\r\n  let jsx = element\r\n  if (hidden) {\r\n    // Hidden input\r\n    return <Input {...field} type=\"hidden\" />\r\n  }\r\n  // Support default elements of antd\r\n  if (element === 'select') {\r\n    jsx = (\r\n      <Select>\r\n        {options.map(getSelectOption)}\r\n      </Select>\r\n    )\r\n    _onChange = (value, option) => setFieldValue(field.name, value)\r\n  }\r\n  if (element === 'checkbox') {\r\n    jsx = (\r\n      <Checkbox checked={field.value}>\r\n        {title}\r\n      </Checkbox>\r\n    )\r\n  }\r\n  if (element === 'checkboxGroup') {\r\n    jsx = (<CheckboxGroup options={options}/>)\r\n    _onChange = (values) => setFieldValue(field.name, values)\r\n  }\r\n  // Inject formik props + override handlers if provided.\r\n  const withCustomHandlers = {\r\n    ...field,\r\n    onChange: _onChange ? _onChange : field.onChange,\r\n    onBlur: _onBlur ? _onBlur : field.onBlur,\r\n  }\r\n  const WithProps = React.cloneElement(jsx, { ...withCustomHandlers })\r\n  const errorMsg = touched[field.name] && errors[field.name]\r\n  return (\r\n    <FormItem required={required} help={errorMsg} validateStatus={errorMsg ? 'error' : ''} label={label} {...layout} >\r\n      {WithProps}\r\n    </FormItem>\r\n  )\r\n}\r\n\r\nexport const AntdField = props => <Field {...props} component={FormItemWrapper} />\r\n"],"mappings":"AAIA","sourceRoot":""}